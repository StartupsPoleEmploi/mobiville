stages:
  - build_liv_recette
  - deploy_recette
  - liv_production
  - deploy_production

build_liv_front_on_recette:
  stage: build_liv_recette
  image: node:12.18.0
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client 
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    # installe de yarn
    - (which yarn || npm i -g yarn@1.15.2)
    - cd ./front
    # recupération des dépendances npm
    - yarn install 
    # On minifie les src ds le livrable dist
    - yarn run build && cp -RT build dist
    # On livre le livrable dist sur la machine de recette
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_RECETTE "mkdir -p $WORKDIR_SERVER/nginx/front"
    - scp -o StrictHostKeyChecking=no -r ./dist gitlab@$IP_RECETTE:$WORKDIR_SERVER/nginx/front
  artifacts:
    paths:
      - ./front/dist 
    expire_in: 1 week
  only:
    refs:
      - develop
    # *changes:
    #  - ./front/**/*

build_liv_front-admin_on_recette:
  stage: build_liv_recette
  image: node:12.18.0
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client sed
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    # installe de yarn
    - (which yarn || npm i -g yarn@1.15.2)
    - cd ./front-admin
    # recupération des dépendances npm
    - yarn install 
    # On minifie les src ds le livrable dist
    - yarn run build && cp -RT build dist
    - sed -i 's/return a.p+"/return a.p+"\//g' dist/index.html
    # On livre le livrable dist sur le 
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_RECETTE "mkdir -p $WORKDIR_SERVER/nginx/front-admin"
    - scp -o StrictHostKeyChecking=no -r ./dist gitlab@$IP_RECETTE:$WORKDIR_SERVER/nginx/front-admin
  artifacts:
    paths:
      - ./front-admin/dist 
    expire_in: 1 week
  only:
    refs:
      - develop
    # changes:
    #   - ./front-admin/**/*

build_api_image:
  stage: build_liv_recette 
  image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
  script:
    # On construit l'image docker du composant front et on la sauvegarde dans le registry gitlab
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dockerfile_api --destination $CI_REGISTRY_IMAGE:api
  only:
    refs:
      - develop
    # changes:
    #   - ./api/*
    #   - ./api/**/*

deploy_application_on_recette:
  stage: deploy_recette
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client 
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    - echo -e "DATABASE_URL=$DATABASE_URL\nMYSQL_DATABASE=$MYSQL_DATABASE\nMYSQL_USER=$MYSQL_USER\nMYSQL_PASSWORD=$MYSQL_PASSWORD\nEMPLOI_STORE_URL=$EMPLOI_STORE_URL\nENTERPRISE_URL=$ENTERPRISE_URL\nEMPLOI_STORE_ID=$EMPLOI_STORE_ID\nEMPLOI_STORE_SECRET=$EMPLOI_STORE_SECRET" > .env 
    - scp -o StrictHostKeyChecking=no package.json docker-compose.yml docker-compose.recette.yml .env gitlab@$IP_RECETTE:$WORKDIR_SERVER
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_RECETTE "mkdir -p $WORKDIR_SERVER/nginx"
    - scp -o StrictHostKeyChecking=no nginx/recette.conf gitlab@$IP_RECETTE:$WORKDIR_SERVER/nginx/
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_RECETTE "
                cd $WORKDIR_SERVER &&
                docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
                docker-compose -f docker-compose.yml -f docker-compose.recette.yml pull && 
                docker-compose -f docker-compose.yml -f docker-compose.recette.yml up -d"
  only:
    refs:
      - develop
  when: on_success # s'exécutera uniquement si le job `build` passe

liv_application_on_production:
  stage: liv_production
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client 
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_PRODUCTION "rm -rf $WORKDIR_SERVER/nginx"
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_PRODUCTION "mkdir -p $WORKDIR_SERVER/nginx/front"
    - scp -o StrictHostKeyChecking=no -r ./front/dist gitlab@$IP_PRODUCTION:$WORKDIR_SERVER/nginx/front
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_PRODUCTION "mkdir -p $WORKDIR_SERVER/nginx/front-admin"
    - scp -o StrictHostKeyChecking=no -r ./front-admin/dist gitlab@$IP_PRODUCTION:$WORKDIR_SERVER/nginx/front-admin
  when: manual

deploy_application_on_production:
  stage: deploy_production
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client 
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - scp -o StrictHostKeyChecking=no package.json docker-compose.yml docker-compose.production.yml gitlab@$IP_PRODUCTION:$WORKDIR_SERVER
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_PRODUCTION "mkdir -p $WORKDIR_SERVER/nginx"
    - scp -o StrictHostKeyChecking=no nginx/production.conf gitlab@$IP_PRODUCTION:$WORKDIR_SERVER/nginx/
    - scp -o StrictHostKeyChecking=no -r nginx/ssl gitlab@$IP_PRODUCTION:$WORKDIR_SERVER/nginx/
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_PRODUCTION \
                "cd $WORKDIR_SERVER && \
                echo -e 'DATABASE_URL=$DATABASE_URL\nMYSQL_DATABASE=$MYSQL_DATABASE\nMYSQL_USER=$MYSQL_USER\nMYSQL_PASSWORD=$MYSQL_PASSWORD\nEMPLOI_STORE_URL=$EMPLOI_STORE_URL\nENTERPRISE_URL=$ENTERPRISE_URL\nEMPLOI_STORE_ID=$EMPLOI_STORE_ID\nEMPLOI_STORE_SECRET=$EMPLOI_STORE_SECRET' > .env && \
                docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD && \
                docker-compose -f docker-compose.yml -f docker-compose.production.yml pull && \
                docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d"
  when: manual
    
sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_TOKEN: "${SONAR_TOKEN}"
    SONAR_HOST_URL: "https://sonarqube.beta.pole-emploi.fr"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: 0 # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .sonar/cache
  stage: test
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=mobiville
  allow_failure: true
  when: manual
