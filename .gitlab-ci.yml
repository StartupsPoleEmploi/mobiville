stages:
  - install
  - build
  - test
  - publish
  - config_staging
  - deploy_staging
  - config_production
  - deploy_production


variables:
  PACKAGE_NAME: mobiville
  PACKAGE_VERSION: 1.0.0
  DATABASEDUMP_VERSION: 1.0.0
  IP_TEST: 192.168.4.134
  RECETTE:
    value: "192.168.4.192"
    description: ip for the staging machine
  PRODUCTION:
    value: "51.68.80.218"
    description: ip for the production machine
  DEV_BRANCH:
    value: "develop"
    description: name of the staging branch
  PROD_BRANCH:
    value: "master"
    description: name of the production deployment branch
  FORCE_INSTALL:
    value: "NO"
    description: production install from scratch mobiville with "YES"
  RENEW_TLS:
    value: "NO"
    description: replace TLS certificate with "YES"
  a11y_urls: "https://mobiville.pole-emploi.fr https://mobiville.beta.pole-emploi.fr/rechercher/romehttps://mobiville.beta.pole-emploi.fr/cities?code_rome=j1501&code_criterion=small-city,mountain&code_region=94&code_city=small-city&code_environment=mountain https://mobiville.beta.pole-emploi.fr/city/2b036-bigorno?code_rome=j1501"


include:
  - template: Security/Secret-Detection.gitlab-ci.yml

secret_detection:
  variables:
    SECRET_DETECTION_HISTORIC_SCAN: "true"


test:sonar:
  extends: .sonarqube-check
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'


test:a11y:
  extends: .a11y
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'


package 1/2:
  stage: build
  image: node:12.18.0
  script:
    # installe de yarn
    - (which yarn || npm i -g yarn@1.15.2)
    - cd ./front
    # recupération des dépendances npm
    - yarn install
    # on minifie les src ds le livrable dist
    - yarn run build && cp -RT build dist
  artifacts:
    paths:
      - front/dist
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - front/**/*


package 2/2:
  stage: publish
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq curl
  script:
    - cd ./front
    - tar -czvf "${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz" dist
    - 'curl --header "job-token: $CI_JOB_TOKEN" --upload-file ${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz"'
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - front/**/*


publish api image:
  stage: publish
  image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
  script:
    # on construit l'image docker du composant front et on la sauvegarde dans le registry gitlab
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dockerfile_api --destination $CI_REGISTRY_IMAGE:api
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - api/**/*


deploy front staging:
  extends: .deploy_front
  stage: deploy_staging
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - front/**/*
  variables:
    IP_SERVER: $RECETTE
    SSH_PKEY: $SSH_PRIVATE_KEY
  environment:
    name: recette
    url: https://mobiville.beta.pole-emploi.fr


deploy api staging:
  extends: .deploy_api
  stage: deploy_staging
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - api/**/*
  variables:
    IP_SERVER: $RECETTE
    ENV_TARGET: recette
    SSH_PKEY: $SSH_PRIVATE_KEY
  environment:
    name: recette
    url: https://mobiville.beta.pole-emploi.fr


deploy conf staging:
  extends: .deploy_conf
  stage: config_staging
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - nginx/**/*
        - /package.json
        - docker-compose.yml
        - docker-compose.recette.yml
  variables:
    IP_SERVER: $RECETTE
    ENV_TARGET: recette
    SSH_PKEY: $SSH_PRIVATE_KEY
  environment:
    name: recette
    url: https://mobiville.beta.pole-emploi.fr


deploy front production:
  extends: .deploy_front
  stage: deploy_production
  rules:
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'
      changes:
        - front/**/*
      when: manual
  variables:
    IP_SERVER: $PRODUCTION
    ENV_TARGET: production
    SSH_PKEY: $SSH_PRIVATE_KEY_PROD
  environment:
    name: production
    url: https://mobiville.beta.pole-emploi.fr


deploy api production:
  extends: .deploy_api
  stage: deploy_production
  rules:
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'
      changes:
        - api/**/*
      when: manual
  variables:
    IP_SERVER: $PRODUCTION
    ENV_TARGET: production
    SSH_PKEY: $SSH_PRIVATE_KEY_PROD
  environment:
    name: production
    url: https://mobiville.beta.pole-emploi.fr


deploy conf production:
  extends: .deploy_conf
  stage: config_production
  rules:
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'
      changes:
        - nginx/**/*
        - /package.json
        - docker-compose.yml
        - docker-compose.production.yml
      when: manual
  variables:
    IP_SERVER: $PRODUCTION
    ENV_TARGET: production
    SSH_PKEY: $SSH_PRIVATE_KEY_PROD
  environment:
    name: production
    url: https://mobiville.beta.pole-emploi.fr


.deploy_api:
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add ssh_private_key in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PKEY")
    - mkdir -p ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_SERVER "
                cd $WORKDIR_SERVER &&
                docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
                docker-compose -f docker-compose.yml -f docker-compose.$ENV_TARGET.yml pull &&
                docker-compose -f docker-compose.yml -f docker-compose.$ENV_TARGET.yml up -d &&
                docker logout $CI_REGISTRY"


.deploy_front:
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add ssh_private_key in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PKEY")
    - mkdir -p ~/.ssh
  script:
    # on livre le livrable dist sur la machine de recette
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_SERVER "mkdir -p $WORKDIR_SERVER/nginx/front"
    - 'ssh -o StrictHostKeyChecking=no gitlab@$IP_SERVER "cd $WORKDIR_SERVER && curl -O --header \"deploy-token: $PACKAGE_REGISTRY_TOKEN\" \"https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz\""'
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_SERVER "cd $WORKDIR_SERVER/nginx/front && tar -xzvf ../../${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz && find . -ctime +1 -delete"


.deploy_conf:
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add ssh_private_key in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PKEY")
    - mkdir -p ~/.ssh
  script:
    - echo -e "DATABASE_URL=$DATABASE_URL\nMYSQL_DATABASE=$MYSQL_DATABASE\nMYSQL_USER=$MYSQL_USER\nMYSQL_PASSWORD=$MYSQL_PASSWORD\nEMPLOI_STORE_URL=$EMPLOI_STORE_URL\nENTERPRISE_URL=$ENTERPRISE_URL\nEMPLOI_STORE_ID=$EMPLOI_STORE_ID\nEMPLOI_STORE_SECRET=$EMPLOI_STORE_SECRET" > .env
    - echo "$htpasswd" > nginx/.htpasswd
    - scp -o StrictHostKeyChecking=no package.json docker-compose.yml docker-compose.$ENV_TARGET.yml .env gitlab@$IP_SERVER:$WORKDIR_SERVER
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_SERVER "mkdir -p $WORKDIR_SERVER/nginx/conf.d"
    - scp -o StrictHostKeyChecking=no nginx/conf.d/$ENV_TARGET.conf gitlab@$IP_SERVER:$WORKDIR_SERVER/nginx/conf.d/$ENV_TARGET.conf
    - scp -o StrictHostKeyChecking=no nginx/.htpasswd gitlab@$IP_SERVER:$WORKDIR_SERVER/nginx/
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_SERVER "
                cd $WORKDIR_SERVER &&
                chmod 640 nginx/.htpasswd &&
                docker-compose -f docker-compose.yml -f docker-compose.$ENV_TARGET.yml up -d &&
                docker-compose -f docker-compose.yml -f docker-compose.$ENV_TARGET.yml exec -T nginx bash -c 'nginx -t && nginx -s reload'"



.sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_TOKEN: "${SONAR_TOKEN}"
    SONAR_HOST_URL: "https://sonarqube.beta.pole-emploi.fr"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # defines the location of the analysis task cache
    GIT_DEPTH: 0 # tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .sonar/cache
  stage: test
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=mobiville
  allow_failure: true

.a11y:
  image: registry.gitlab.com/gitlab-org/ci-cd/accessibility:5.3.0-gitlab.3
  script: /gitlab-accessibility.sh $a11y_urls
  allow_failure: true
  artifacts:
    when: always
    expose_as: 'Accessibility Reports'
    paths: ['reports/']
    reports:
      accessibility: reports/gl-accessibility.json
  rules:
    - if: $a11y_urls


renew production tls:
  stage: install
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add ssh_private_key in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - echo "$SSL_dhparam_pem" > nginx/ssl/dhparam.pem
    - echo "$SSL_entrust_mobiville_pole_emploi_fr_key_pem" > nginx/ssl/entrust-mobiville.pole-emploi.fr-key.pem
    - echo "$SSL_mobiville_pole_emploi_fr_crt" > nginx/ssl/mobiville.pole-emploi.fr.crt
    - scp -o StrictHostKeyChecking=no -r nginx/ssl gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "
                cd $WORKDIR_SERVER &&
                chmod 640 nginx/ssl/* &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml exec -T nginx bash -c 'nginx -t && nginx -s reload'"
  rules:
    - if: '$RENEW_TLS == "YES"'
      when: manual
  environment:
    name: production
    url: https://mobiville.beta.pole-emploi.fr


install production:
  stage: install
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add ssh_private_key in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "mkdir $WORKDIR_SERVER"
    - echo -e "DATABASE_URL=$DATABASE_URL\nMYSQL_DATABASE=$MYSQL_DATABASE\nMYSQL_USER=$MYSQL_USER\nMYSQL_PASSWORD=$MYSQL_PASSWORD\nEMPLOI_STORE_URL=$EMPLOI_STORE_URL\nENTERPRISE_URL=$ENTERPRISE_URL\nEMPLOI_STORE_ID=$EMPLOI_STORE_ID\nEMPLOI_STORE_SECRET=$EMPLOI_STORE_SECRET" > .env
    - mkdir nginx/ssl
    - echo "$SSL_dhparam_pem" > nginx/ssl/dhparam.pem
    - echo "$SSL_entrust_mobiville_pole_emploi_fr_key_pem" > nginx/ssl/entrust-mobiville.pole-emploi.fr-key.pem
    - echo "$SSL_mobiville_pole_emploi_fr_crt" > nginx/ssl/mobiville.pole-emploi.fr.crt
    - echo "$htpasswd" > nginx/.htpasswd
    - scp -o StrictHostKeyChecking=no package.json docker-compose.yml docker-compose.production.yml .env gitlab@$PRODUCTION:$WORKDIR_SERVER
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "mkdir -p $WORKDIR_SERVER/nginx/front && mkdir -p $WORKDIR_SERVER/nginx/conf.d"
    - scp -o StrictHostKeyChecking=no nginx/conf.d/production.conf gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/conf.d
    - scp -o StrictHostKeyChecking=no -r nginx/ssl gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/
    - scp -o StrictHostKeyChecking=no nginx/.htpasswd gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/
    - 'ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER && curl -O --header \"deploy-token: $PACKAGE_REGISTRY_TOKEN\" \"https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/database/${DATABASEDUMP_VERSION}/database.${DATABASEDUMP_VERSION}.tar.gz\""'
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER && tar -xzvf database.${DATABASEDUMP_VERSION}.tar.gz"
    - 'ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER && curl -O --header \"deploy-token: $PACKAGE_REGISTRY_TOKEN\" \"https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz\""'
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER/nginx/front && tar -xzvf ../../${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz"
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "
                cd $WORKDIR_SERVER &&
                chmod 640 nginx/ssl/* &&
                chmod 640 nginx/.htpasswd &&
                docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml pull &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d &&
                docker logout $CI_REGISTRY"
  rules:
    - if: '$FORCE_INSTALL == "YES"'
      when: manual
  environment:
    name: production
    url: https://mobiville.beta.pole-emploi.fr

