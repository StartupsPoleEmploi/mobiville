stages:
  - build
  - publish
  - config_staging
  - deploy_staging
  - config_production
  - deploy_production
  - install

variables:
  PACKAGE_NAME: mobiville
  PACKAGE_VERSION: 1.0.0
  DATABASEDUMP_VERSION: 1.0.0
  IP_TEST: 192.168.4.134
  RECETTE: $IP_RECETTE
  PRODUCTION: $IP_PRODUCTION
  REF_BRANCH: develop
  FORCE_INSTALL: 'NO'

package 1/2:
  stage: build
  image: node:12.18.0
  script:
    # installe de yarn
    - (which yarn || npm i -g yarn@1.15.2)
    - cd ./front
    # recupération des dépendances npm
    - yarn install
    # On minifie les src ds le livrable dist
    - yarn run build && cp -RT build dist
  artifacts:
    paths:
      - front/dist
    expire_in: 1 week
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_BRANCH == $REF_BRANCH
    changes:
      - front/**/*

package 2/2:
  stage: publish
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq curl
  script:
    - cd ./front
    - tar -czvf "${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz" dist
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz"'
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_BRANCH == $REF_BRANCH
    changes:
      - front/**/*

api_image:
  stage: build
  image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
  script:
    # On construit l'image docker du composant front et on la sauvegarde dans le registry gitlab
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dockerfile_api --destination $CI_REGISTRY_IMAGE:api
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_BRANCH == $REF_BRANCH
    changes:
      - api/**/*

deploy_front_staging:
  stage: deploy_staging
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    # On livre le livrable dist sur la machine de recette
    - ssh -o StrictHostKeyChecking=no gitlab@$RECETTE "mkdir -p $WORKDIR_SERVER/nginx/front"
    - 'ssh -o StrictHostKeyChecking=no gitlab@$RECETTE "cd $WORKDIR_SERVER && curl -O --header \"DEPLOY-TOKEN: $PACKAGE_REGISTRY_TOKEN\" \"https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz\""'
    - ssh -o StrictHostKeyChecking=no gitlab@$RECETTE "cd $WORKDIR_SERVER/nginx/front && tar -xzvf ../../${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz"
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_BRANCH == $REF_BRANCH
    changes:
      - front/**/*

deploy_api_staging:
  stage: deploy_staging
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no gitlab@$RECETTE "
                cd $WORKDIR_SERVER &&
                docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
                docker-compose -f docker-compose.yml -f docker-compose.recette.yml pull &&
                docker-compose -f docker-compose.yml -f docker-compose.recette.yml up -d &&
                docker logout $CI_REGISTRY"
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_BRANCH == $REF_BRANCH
    changes:
      - api/**/*
  when: on_success # s'exécutera uniquement si le job `build` passe

deploy_conf_staging:
  stage: config_staging
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    - echo -e "DATABASE_URL=$DATABASE_URL\nMYSQL_DATABASE=$MYSQL_DATABASE\nMYSQL_USER=$MYSQL_USER\nMYSQL_PASSWORD=$MYSQL_PASSWORD\nEMPLOI_STORE_URL=$EMPLOI_STORE_URL\nENTERPRISE_URL=$ENTERPRISE_URL\nEMPLOI_STORE_ID=$EMPLOI_STORE_ID\nEMPLOI_STORE_SECRET=$EMPLOI_STORE_SECRET" > .env
    - scp -o StrictHostKeyChecking=no package.json docker-compose.yml docker-compose.recette.yml .env gitlab@$RECETTE:$WORKDIR_SERVER
    - ssh -o StrictHostKeyChecking=no gitlab@$RECETTE "mkdir -p $WORKDIR_SERVER/nginx"
    - scp -o StrictHostKeyChecking=no nginx/recette.conf gitlab@$RECETTE:$WORKDIR_SERVER/nginx/
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_BRANCH == $REF_BRANCH
  when: manual

deploy_front_production:
  stage: deploy_production
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - 'ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER && curl -O --header \"DEPLOY-TOKEN: $PACKAGE_REGISTRY_TOKEN\" \"https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz\""'
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER/nginx/front && tar -xzvf ../../${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz"
  when: manual

deploy_api_production:
  stage: deploy_production
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "
                cd $WORKDIR_SERVER &&
                docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml pull &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d &&
                docker logout $CI_REGISTRY"
  when: manual


deploy_conf_production:
  stage: config_production
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - echo -e "DATABASE_URL=$DATABASE_URL\nMYSQL_DATABASE=$MYSQL_DATABASE\nMYSQL_USER=$MYSQL_USER\nMYSQL_PASSWORD=$MYSQL_PASSWORD\nEMPLOI_STORE_URL=$EMPLOI_STORE_URL\nENTERPRISE_URL=$ENTERPRISE_URL\nEMPLOI_STORE_ID=$EMPLOI_STORE_ID\nEMPLOI_STORE_SECRET=$EMPLOI_STORE_SECRET" > .env
    - scp -o StrictHostKeyChecking=no package.json docker-compose.yml docker-compose.production.yml .env gitlab@$PRODUCTION:$WORKDIR_SERVER
    - scp -o StrictHostKeyChecking=no nginx/production.conf gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/
    - scp -o StrictHostKeyChecking=no -r nginx/ssl gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "
                cd $WORKDIR_SERVER &&
                chmod 640 nginx/ssl/* &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml restart nginx"
  when: manual


install_production:
  stage: install
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "mkdir $WORKDIR_SERVER"
    - echo -e "DATABASE_URL=$DATABASE_URL\nMYSQL_DATABASE=$MYSQL_DATABASE\nMYSQL_USER=$MYSQL_USER\nMYSQL_PASSWORD=$MYSQL_PASSWORD\nEMPLOI_STORE_URL=$EMPLOI_STORE_URL\nENTERPRISE_URL=$ENTERPRISE_URL\nEMPLOI_STORE_ID=$EMPLOI_STORE_ID\nEMPLOI_STORE_SECRET=$EMPLOI_STORE_SECRET" > .env
    - scp -o StrictHostKeyChecking=no package.json docker-compose.yml docker-compose.production.yml .env gitlab@$PRODUCTION:$WORKDIR_SERVER
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "mkdir -p $WORKDIR_SERVER/nginx/front"
    - scp -o StrictHostKeyChecking=no nginx/production.conf gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/
    - scp -o StrictHostKeyChecking=no -r nginx/ssl gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/
    - 'ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER && curl -O --header \"DEPLOY-TOKEN: $PACKAGE_REGISTRY_TOKEN\" \"https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/database/${DATABASEDUMP_VERSION}/database.${DATABASEDUMP_VERSION}.tar.gz\""'
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER && tar -xzvf database.${DATABASEDUMP_VERSION}.tar.gz"
    - 'ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER && curl -O --header \"DEPLOY-TOKEN: $PACKAGE_REGISTRY_TOKEN\" \"https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz\""'
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER/nginx/front && tar -xzvf ../../${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz"
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "
                cd $WORKDIR_SERVER &&
                chmod 640 nginx/ssl/* &&
                docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml pull &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d &&
                docker logout $CI_REGISTRY"
  only:
    variables:
      - $FORCE_INSTALL == 'YES'
  when: manual
