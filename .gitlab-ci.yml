stages:
  - install
  - build
  - test
  - publish
  - config_staging
  - deploy_staging
  - accessibility
  - config_production
  - deploy_production


variables:
  PACKAGE_NAME: mobiville
  PACKAGE_VERSION: 1.0.0
  DATABASEDUMP_VERSION: 1.0.0
  IP_TEST: 192.168.4.134
  RECETTE: $IP_RECETTE
  PRODUCTION: $IP_PRODUCTION
  DEV_BRANCH: develop
  PROD_BRANCH: master
  FORCE_INSTALL:
    value: 'NO'
    description: 'Install from scratch mobiville with "YES"'
  ENV_CHANGED:
    value: 'NO'
    description: 'Deploy new configuration when some env var changed with "YES"'
  a11y_urls: "https://mobiville.pole-emploi.fr https://mobiville.beta.pole-emploi.fr/rechercher/rome https://mobiville.beta.pole-emploi.fr/cities?code_rome=J1501&code_criterion=small-city,mountain&code_region=94&code_city=small-city&code_environment=mountain https://mobiville.beta.pole-emploi.fr/city/2B036-BIGORNO?code_rome=J1501"


sonarqube-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_TOKEN: "${SONAR_TOKEN}"
    SONAR_HOST_URL: "https://sonarqube.beta.pole-emploi.fr"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: 0 # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .sonar/cache
  stage: test
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=mobiville
  allow_failure: true
  when: on_success


include:
  - template: "Verify/Accessibility.gitlab-ci.yml"
    when: on_success


package 1/2:
  stage: build
  image: node:12.18.0
  script:
    # installe de yarn
    - (which yarn || npm i -g yarn@1.15.2)
    - cd ./front
    # recupération des dépendances npm
    - yarn install
    # On minifie les src ds le livrable dist
    - yarn run build && cp -RT build dist
  artifacts:
    paths:
      - front/dist
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - front/**/*


package 2/2:
  stage: publish
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq curl
  script:
    - cd ./front
    - tar -czvf "${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz" dist
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz"'
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - front/**/*


publish api image:
  stage: publish
  image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
  script:
    # On construit l'image docker du composant front et on la sauvegarde dans le registry gitlab
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dockerfile_api --destination $CI_REGISTRY_IMAGE:api
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - api/**/*


deploy front staging:
  stage: deploy_staging
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    # On livre le livrable dist sur la machine de recette
    - ssh -o StrictHostKeyChecking=no gitlab@$RECETTE "mkdir -p $WORKDIR_SERVER/nginx/front"
    - 'ssh -o StrictHostKeyChecking=no gitlab@$RECETTE "cd $WORKDIR_SERVER && curl -O --header \"DEPLOY-TOKEN: $PACKAGE_REGISTRY_TOKEN\" \"https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz\""'
    - ssh -o StrictHostKeyChecking=no gitlab@$RECETTE "cd $WORKDIR_SERVER/nginx/front && tar -xzvf ../../${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz && find . -ctime +1 -delete"
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - front/**/*


deploy api staging:
  stage: deploy_staging
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no gitlab@$RECETTE "
                cd $WORKDIR_SERVER &&
                docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
                docker-compose -f docker-compose.yml -f docker-compose.recette.yml pull &&
                docker-compose -f docker-compose.yml -f docker-compose.recette.yml up -d &&
                docker logout $CI_REGISTRY"
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - api/**/*


deploy conf staging:
  stage: config_staging
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    - echo -e "DATABASE_URL=$DATABASE_URL\nMYSQL_DATABASE=$MYSQL_DATABASE\nMYSQL_USER=$MYSQL_USER\nMYSQL_PASSWORD=$MYSQL_PASSWORD\nEMPLOI_STORE_URL=$EMPLOI_STORE_URL\nENTERPRISE_URL=$ENTERPRISE_URL\nEMPLOI_STORE_ID=$EMPLOI_STORE_ID\nEMPLOI_STORE_SECRET=$EMPLOI_STORE_SECRET" > .env
    - scp -o StrictHostKeyChecking=no package.json docker-compose.yml docker-compose.recette.yml .env gitlab@$RECETTE:$WORKDIR_SERVER
    - ssh -o StrictHostKeyChecking=no gitlab@$RECETTE "mkdir -p $WORKDIR_SERVER/nginx"
    - scp -o StrictHostKeyChecking=no nginx/recette.conf gitlab@$RECETTE:$WORKDIR_SERVER/nginx/
    - ssh -o StrictHostKeyChecking=no gitlab@$RECETTE "
                cd $WORKDIR_SERVER &&
                docker-compose -f docker-compose.yml -f docker-compose.recette.yml up -d &&
                docker-compose -f docker-compose.yml -f docker-compose.recette.yml exec -T nginx nginx -s reload"
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - nginx/**/*
        - /package.json
        - docker-compose.yml
        - docker-compose.recette.yml
    - if: '$ENV_CHANGED == "YES"'


deploy front production:
  stage: deploy_production
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - 'ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER && curl -O --header \"DEPLOY-TOKEN: $PACKAGE_REGISTRY_TOKEN\" \"https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz\""'
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER/nginx/front && tar -xzvf ../../${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz && find . -ctime +1 -delete"
  rules:
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'
      changes:
        - front/**/*
      when: manual


deploy api production:
  stage: deploy_production
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "
                cd $WORKDIR_SERVER &&
                docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml pull &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d &&
                docker logout $CI_REGISTRY"
  rules:
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'
      changes:
        - api/**/*
      when: manual


deploy conf production:
  stage: config_production
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - echo -e "DATABASE_URL=$DATABASE_URL\nMYSQL_DATABASE=$MYSQL_DATABASE\nMYSQL_USER=$MYSQL_USER\nMYSQL_PASSWORD=$MYSQL_PASSWORD\nEMPLOI_STORE_URL=$EMPLOI_STORE_URL\nENTERPRISE_URL=$ENTERPRISE_URL\nEMPLOI_STORE_ID=$EMPLOI_STORE_ID\nEMPLOI_STORE_SECRET=$EMPLOI_STORE_SECRET" > .env
    - scp -o StrictHostKeyChecking=no package.json docker-compose.yml docker-compose.production.yml .env gitlab@$PRODUCTION:$WORKDIR_SERVER
    - scp -o StrictHostKeyChecking=no nginx/production.conf gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/
    - scp -o StrictHostKeyChecking=no -r nginx/ssl gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "
                cd $WORKDIR_SERVER &&
                chmod 640 nginx/ssl/* &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml exec -T nginx nginx -s reload"
  rules:
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'
      changes:
        - nginx/**/*
        - /package.json
        - docker-compose.yml
        - docker-compose.production.yml
      when: manual


install production:
  stage: install
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_PROD")
    - mkdir -p ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "mkdir $WORKDIR_SERVER"
    - echo -e "DATABASE_URL=$DATABASE_URL\nMYSQL_DATABASE=$MYSQL_DATABASE\nMYSQL_USER=$MYSQL_USER\nMYSQL_PASSWORD=$MYSQL_PASSWORD\nEMPLOI_STORE_URL=$EMPLOI_STORE_URL\nENTERPRISE_URL=$ENTERPRISE_URL\nEMPLOI_STORE_ID=$EMPLOI_STORE_ID\nEMPLOI_STORE_SECRET=$EMPLOI_STORE_SECRET" > .env
    - scp -o StrictHostKeyChecking=no package.json docker-compose.yml docker-compose.production.yml .env gitlab@$PRODUCTION:$WORKDIR_SERVER
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "mkdir -p $WORKDIR_SERVER/nginx/front"
    - scp -o StrictHostKeyChecking=no nginx/production.conf gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/
    - scp -o StrictHostKeyChecking=no -r nginx/ssl gitlab@$PRODUCTION:$WORKDIR_SERVER/nginx/
    - 'ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER && curl -O --header \"DEPLOY-TOKEN: $PACKAGE_REGISTRY_TOKEN\" \"https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/database/${DATABASEDUMP_VERSION}/database.${DATABASEDUMP_VERSION}.tar.gz\""'
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER && tar -xzvf database.${DATABASEDUMP_VERSION}.tar.gz"
    - 'ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER && curl -O --header \"DEPLOY-TOKEN: $PACKAGE_REGISTRY_TOKEN\" \"https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz\""'
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "cd $WORKDIR_SERVER/nginx/front && tar -xzvf ../../${PACKAGE_NAME}.${PACKAGE_VERSION}.tar.gz"
    - ssh -o StrictHostKeyChecking=no gitlab@$PRODUCTION "
                cd $WORKDIR_SERVER &&
                chmod 640 nginx/ssl/* &&
                docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml pull &&
                docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d &&
                docker logout $CI_REGISTRY"
  rules:
    - if: '$FORCE_INSTALL == "YES"'
      when: manual
